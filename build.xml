<project name="processFlowProvision-distro" default="all" xmlns:artifact="antlib:org.apache.maven.artifact.ant" >

    <property environment="ENV"/>
    <property file="build.properties" />

    <import file="base-build.xml"/>
    <import file="openshift-build.xml" />
    <import file="osProvision/build.xml"/>

    <target name="refresh.master" >
        <echo message="***** refresh.master :  will now call the following target :  local.stop.master, clone.jboss, and local.start.master" />
        <antcall target="local.stop.master"  />
        <!-- antcall target="configureJbossAdmin" / -->
        <antcall target="pfp.clean" />
        <mkdir dir="${install.home}/lib" />
        <antcall target="clone.jboss" />
        <antcall target="local.deploy.jboss.modules" />
        <antcall target="addUserRoleConfigs" >
            <param name="config.path" value="${jboss.home}/${jboss.domain.base.dir}/configuration" />
        </antcall>
        <antcall target="local.start.master"  />
        <antcall target="cli.batch">
                <param name="cli.source.dir" value="conf/jboss/"/>
                <param name="cli.to.filter.and.execute" value="jboss-config.cli"/>
        </antcall>
        <antcall target="provision.jboss.with.jdbc" />
    </target>

    <target name="refresh.slave.hosts" depends="setClasspath" >
        <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
            <sequential>
                <var name="serverIpAddr" value="@{serverIpAddr}" />
                <if>
                    <not><equals arg1="${serverIpAddr}" arg2="master" /></not>
                    <then>
                        <echo message="refresh.slave.hosts() serverIpAddr = ${serverIpAddr}" />
                        <java fork="yes" classname="org.jboss.processFlow.util.GeneratePasswordHash" failonerror="true">
                            <sysproperty key="USER_ID" value="${serverIpAddr}" />
                            <sysproperty key="REALM" value="ManagementRealm" />
                            <sysproperty key="PASSWORD" value="${jboss.admin.password}" />
                            <sysproperty key="MGT_USERS_PROPS_FILE" value="${jboss.home}/${jboss.domain.base.dir}/configuration/mgmt-users.properties" />
                            <sysproperty key="log4j.configuration" value="file:${development.base}/conf/test/log4j.xml" />
                            <classpath refid="classpath"/>
                        </java>
                        <antcall target="filter">
                            <param name="source.dir" value="conf/jboss/${community.or.supported}/slave"/>
                            <param name="dest.dir" value="${temp.jboss.dir}/domain-${organization.name}/configuration"/>
                        </antcall>
                        <antcall target="filter">
                            <param name="source.dir" value="conf/brmsWebs/drools-guvnor"/>
                            <param name="file.name" value="repository.xml"/>
                            <param name="dest.dir" value="${temp.brmsWebs.dir}"/>
                        </antcall>
                        <exec executable="bash" failonerror="true" dir=".">
                            <arg value="bin/local.jboss.domain.sh" />
                            <arg value="refreshSlaveHosts" />
                            <arg value="-serverIpAddr=${serverIpAddr}" />
                            <arg value="-orgName=${organization.name}" />
                            <arg value="-localGuvnorRepoLocation=${local.guvnor.repo.location}" />
                            <arg value="-eap6DownloadName=${eap6.download.name}" />
                            <arg value="-switchyardZipName=${switchyard.zip.name}" />
                        </exec>
                    </then>
                </if>
            </sequential>
        </for>
        <sleep seconds="5"/> <!-- sleep 5 seconds in case slave hosts need extra time to start -->
    </target>

    <target name="checkServersAndProjectLib">
        <available file="${JBOSS_HOME}/jboss-modules.jar" property="defaultServerExists" />
        <fail unless="defaultServerExists" message="${JBOSS_HOME}/jboss-modules.jar doesn't exist! .... please fix your $JBOSS_HOME environment variable!!" />
        <condition property="projectLibNotExist">
            <not>
                <available file="${project.lib}" />
            </not>
        </condition>
        <condition property="projectLibExists">
                <available file="${project.lib}" />
        </condition>
    </target>

    <!-- create a clone of the JBoss EAP 'domain' config and name it the value of ${jboss.domain.base.dir} -->
    <target name="clone.jboss" >
        <if>
            <not><available file="${jboss.home}/domain/configuration/domain.xml" /></not>
            <then>
                <if>
                    <equals arg1="${community.or.supported}" arg2="community" />
                    <then>
                        <get src="${as7.download.url}" dest="${install.home}/lib/${as7.name}.zip"  skipexisting="true" />
                        <unzip src="${install.home}/lib/${as7.name}.zip" dest="${jboss.home}/.." />
                    </then>
                    <else>
                        <get src="${eap6.download.url}" dest="${install.home}/lib/"  skipexisting="true" />
                        <unzip src="${install.home}/lib/${eap6.download.name}" dest="${jboss.home}/.." />
                    </else>
                </if>
            </then>
        </if>
        <delete dir="${jboss.home}/${jboss.domain.base.dir}" />
        <copy overwrite="true" todir="${jboss.home}/${jboss.domain.base.dir}">
            <fileset dir="${jboss.home}/domain" />
        </copy>
        <antcall target="filter">
            <param name="source.dir" value="conf/jboss/${community.or.supported}"/>
            <param name="file.name" value="domain.xml"/>
            <param name="dest.dir" value="${jboss.home}/${jboss.domain.base.dir}/configuration"/>
        </antcall>
        <copy file="conf/jboss/${community.or.supported}/host.xml" todir="${jboss.home}/${jboss.domain.base.dir}/configuration" overwrite="true" verbose="true" />
    </target>

    <target name="provision.jboss.with.jdbc" >
        <property name="db.script" value="${jdbc.module.name}-config-up.cli" />
        <antcall target="cli.batch">
            <param name="cli.source.dir" value="conf/jboss"/>
            <param name="cli.to.filter.and.execute" value="${db.script}"/>
            <param name="cli.fail.on.error" value="true"/>
        </antcall>
    </target>


    <!-- see:  <as7-source>/domain-management/src/main/java/org/jboss/as/domain/management/security/AddPropertiesUser.java -->
    <!-- does not work in as7.1.2.Final due to :
            Exception in thread "main" java.lang.IllegalStateException: JBAS015232: No java.io.Console available to interact with user.
            at org.jboss.as.domain.management.security.AddPropertiesUser.<init>(AddPropertiesUser.java:108)
            at org.jboss.as.domain.management.security.AddPropertiesUser.<init>(AddPropertiesUser.java:119)
            at org.jboss.as.domain.management.security.AddPropertiesUser.main(AddPropertiesUser.java:167)

        - appears this is fixed in 7.2.*
    -->
    <target name="configureJbossAdmin" >
        <exec executable="bash" failonerror="true" dir=".">
            <arg value="bin/local.jboss.domain.sh" />
            <arg value="executeAddUser" />
            <arg value="-isAdmin=true" />
            <arg value="-userId=${jboss.admin.id}"/>
            <arg value="-password=${jboss.admin.password}"/>
        </exec>
    </target>



    <target name="download.brms.deployable" depends="mkPfpDirs" >
        <echo message="Getting BRMS ..." />
        <get src="${brms.download.url}" dest="${install.home}/lib/${brms.deployable.suffix}"  skipexisting="true" />
    </target>

    <target name="unzip.brms.deployable">
        <antcall target="download.brms.deployable" />
        <if>
            <not><available file="${temp.brms.unzip.dir}/${guvnor.name}" type="dir" /></not> 
            <then>
                <unzip src="${install.home}/lib/${brms.deployable.suffix}" dest="${temp.brms.unzip.dir}" />
                <delete file="${temp.brms.unzip.dir}/modeshape.zip" />
                <unzip src="${temp.brms.unzip.dir}/jboss-brms-engine.zip" dest="${temp.brms.unzip.dir}" />
                <delete file="${temp.brms.unzip.dir}/jboss-brms-engine.zip" />
                <unzip src="${temp.brms.unzip.dir}/jboss-jbpm-engine.zip" dest="${temp.brms.unzip.dir}" />
                <delete file="${temp.brms.unzip.dir}/jboss-jbpm-engine.zip" />
                <unzip src="${temp.brms.unzip.dir}/jboss-brms-manager-ee6.zip" dest="${temp.brms.unzip.dir}" />
                <delete file="${temp.brms.unzip.dir}/jboss-brms-manager-ee6.zip" />

                <!-- contains: "business-central.war",  "designer.war", "gwt-console-server.war" &  "jbpm-human-task.war" -->
                <unzip src="${temp.brms.unzip.dir}/jboss-jbpm-console-ee6.zip" dest="${temp.brms.unzip.dir}" />
                <delete file="${temp.brms.unzip.dir}/jboss-jbpm-console-ee6.zip" />
            </then>
            <else>
                <echo message="${temp.brms.unzip.dir}/${guvnor.name} already located .... no need to unzip brms again" />
            </else>
        </if>
    </target>

    <!-- re-create guvnor filesystem and copy over repository.xml -->
    <target name="local.refresh.guvnor" >
        <delete dir="${local.guvnor.repo.location}" />
        <mkdir dir="${local.guvnor.repo.location}" />
    </target>

    <target name="explode.guvnor.and.designer" >
        <if>
            <equals arg1="${community.or.supported}" arg2="supported" />
            <then>
                <antcall target="unzip.brms.deployable" />
                <copy todir="${guvnor.target}" >
                    <fileset dir="${temp.brms.unzip.dir}/jboss-brms.war" />
                </copy>
                <copy todir="${designer.target}" >
                    <fileset dir="${temp.brms.unzip.dir}/designer.war" />
                </copy>
            </then>
            <else>
                <antcall target="download.community.guvnor.and.designer" />
                <unzip src="${install.home}/lib/guvnor-distribution-wars-${drools.guvnor.version}-jboss-as-7.0.war" dest="${guvnor.target}" />
                <unzip src="${install.home}/lib/jbpm-designer-${designer.version}.war" dest="${designer.target}" />
            </else>
        </if>
        <if>
            <isset property="non.openshift.environment"/>
            <then><property name="guvnor.repo.location" value="${local.guvnor.repo.location}" /></then>
            <else><property name="guvnor.repo.location" value="${openshift.guvnor.repo.location}" /></else>
        </if>
        <delete file="${guvnor.target}/WEB-INF/classes/log4j.xml" />
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/drools-guvnor/WEB-INF"/>
            <!-- BRMS 5.3.1 does not use beans.xml
            <param name="file.name" value="beans.xml"/ -->
            <param name="file.name" value="components.xml"/>
            <param name="dest.dir" value="${guvnor.target}/WEB-INF"/>
        </antcall>
        <if>
            <equals arg1="${org.jboss.processFlow.brmsWebs.clustered}" arg2="true" />
            <then>
                <property name="serverIpAddr" value="master" />
                <antcall target="filter">
                    <param name="source.dir" value="conf/brmsWebs/drools-guvnor"/>
                    <param name="file.name" value="repository.xml"/>
                    <param name="dest.dir" value="${local.guvnor.repo.location}"/>
                </antcall>
            </then>
            <else><echo message="brmsWebs not clustered.  will just use default derby with filesystem persistence" /></else>
        </if>
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/drools-guvnor/WEB-INF/classes"/>
            <param name="dest.dir" value="${guvnor.target}/WEB-INF/classes"/>
        </antcall>
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/drools-guvnor/WEB-INF"/>
            <param name="dest.dir" value="${guvnor.target}/WEB-INF"/>
        </antcall>
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/drools-guvnor/WEB-INF"/>
            <param name="file.name" value="jboss-deployment-structure.xml"/>
            <param name="dest.dir" value="${guvnor.target}/WEB-INF"/>
        </antcall>
        <move todir="${temp.brmsExtras.module.path}">
            <fileset dir="${guvnor.target}/WEB-INF/lib" >
                <include name="*.jar" />
                <exclude name="*seam*.jar" />
                <exclude name="gwt*.jar" />
                <exclude name="cobogw*.jar" />
                <exclude name="droolsjbpm-ide-common*.jar" />
            </fileset>
        </move>
        <delete file="${guvnor.target}/WEB-INF/lib/droolsjbpm-ide-common-${jBPM.version}.jar" />

        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/designer/profiles"/>
            <param name="file.name" value="jbpm.xml"/>
            <param name="dest.dir" value="${designer.target}/profiles"/>
        </antcall>
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/designer/WEB-INF"/>
            <param name="dest.dir" value="${designer.target}/WEB-INF"/>
        </antcall>
        <move todir="${temp.brmsExtras.module.path}">
            <fileset dir="${designer.target}/WEB-INF/lib" >
                <include name="*.jar" />
                <exclude name="jbpm-bpmn2-emfextmodel*.jar" />
            </fileset>
        </move>
    </target>

    <target name="explode.jbpm.gwt.console" >
        <if>
            <equals arg1="${community.or.supported}" arg2="supported" />
            <then>
                <antcall target="unzip.brms.deployable" />
                <copy todir="${console.target}" >
                    <fileset dir="${temp.brms.unzip.dir}/${console.name}" />
                </copy>
                <copy todir="${console.server.target}">
                    <fileset dir="${temp.brms.unzip.dir}/${console.server.name}" />
                </copy>
            </then>
            <else>
                <unzip src="${jbpm.source.dir}/jbpm-gwt/jbpm-gwt-console/target/jbpm-gwt-console-${jBPM.version}.war" dest="${console.target}"/>
                <unzip src="${jbpm.source.dir}/jbpm-gwt/jbpm-gwt-console-server/target/jbpm-gwt-console-server-${jBPM.version}-EE6.war" dest="${console.server.target}"/>
            </else>
        </if>
        <move todir="${temp.brmsExtras.module.path}">
            <fileset dir="${console.server.target}/WEB-INF/lib" >
                <include name="*.jar" />
                <include name="jbpm-gwt-shared*.jar" />
                <exclude name="gwt*.jar" />
                <exclude name="jbpm-gwt*.jar" />
            </fileset>
        </move>
        <move todir="${temp.brmsExtras.module.path}">
            <fileset dir="${console.target}/WEB-INF/lib" >
                <include name="*.jar" />
                <exclude name="gwt*.jar" />
            </fileset>
            <fileset dir="${console.target}/WEB-INF/classes" >
                <include name="Errai*.properties" />
            </fileset>
        </move>
        <copy file="${temp.pfp.lib.dir}/processFlow-adminConsole.jar" todir="${console.server.target}/WEB-INF/lib" />

        <delete file="${console.server.target}/WEB-INF/classes/ChangeSet.xml" />
        <delete file="${console.server.target}/WEB-INF/classes/META-INF/persistence.xml" />

        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/bpm-console"/>
            <param name="dest.dir" value="${console.target}"/>
        </antcall>
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/bpm-console-server/WEB-INF"/>
            <param name="dest.dir" value="${console.server.target}/WEB-INF"/>
        </antcall>

        <!-- bpm-console integration in BRMS 5.3.1 uses GuvnorConnectionUtils directly
             - expects a valid jbpm.console.properties in root of classpath
        -->
        <antcall target="filter">
            <param name="source.dir" value="conf/jboss/modules/org/jbpm/configuration/main"/>
            <param name="file.name" value="jbpm.console.properties"/>
            <param name="dest.dir" value="${console.server.target}/WEB-INF/classes"/>
        </antcall>
    </target>

    <target name="addUserRoleConfigs" >
        <fail unless="config.path" message="addUserRoleConfigs:  need to pass 'config.path' property" />
        <copy file="conf/jboss/application-roles.properties" todir="${temp.jboss.dir}/domain-${organization.name}/configuration" verbose="true" overwrite="true" />
        <copy file="conf/jboss/application-users.properties" todir="${temp.jboss.dir}/domain-${organization.name}/configuration" verbose="true" overwrite="true" />
        <copy file="${temp.jboss.dir}/domain-${organization.name}/configuration/application-roles.properties" todir="${config.path}" verbose="true" overwrite="true" />
        <copy file="${temp.jboss.dir}/domain-${organization.name}/configuration/application-users.properties" todir="${config.path}" verbose="true" overwrite="true" />
        <copy file="conf/jboss/mgmt-users.properties" todir="${config.path}" verbose="true" overwrite="true" />
    </target>

    <target name="install.reporting.into.jboss7" >
        <antcall target="download.birt.as7" />
        <delete dir="${org.jbpm.report.dir}" />
        <mkdir dir="${org.jbpm.report.dir}/ReportEngine" />
        <antcall target="filter">
            <param name="source.dir" value="conf/brmsWebs/birt"/>
            <param name="file.name" value="overall_activity.rptdesign"/>
            <param name="dest.dir" value="${org.jbpm.report.dir}"/>
        </antcall>
        <unzip src="${install.home}/lib/birt-runtime-${birt.version}.zip" dest="${temp.brmsWebs.dir}"/>
        <delete >
            <fileset dir="${console.server.target}/WEB-INF/lib" >
                <include name="report*.*" />
            </fileset>
        </delete>
        <copy todir="${console.server.target}/WEB-INF/lib">
            <fileset dir="${birt.target}/ReportEngine/lib">
                <include name="**/*.jar"/>
                <exclude name="org.apache.commons.codec*.jar"/>
            </fileset>
            <fileset dir="${install.home}/lib/reporting">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="local.deploy.jbpm.gwt.console" >
        <jar jarfile="${console.server.zipped}" basedir="${console.server.target}" />
        <jar jarfile="${console.zipped}" basedir="${console.target}" />
    </target>

    <target name="local.deploy.guvnor.designer" >
        <jar jarfile="${guvnor.zipped}" basedir="${guvnor.target}" />
        <jar jarfile="${designer.zipped}" basedir="${designer.target}" />
    </target>

    <!-- Install Eclipse plugins -->
    <target name="local.install.drools-eclipse.into.eclipse" >
        <get src="${drools.eclipse.url}" dest="${install.home}/lib/org.drools.updatesite-${drools.eclipse.version}-assembly.zip"  skipexisting="true" />
        <mkdir dir="${eclipse.home}/drools-update-site"/>
        <unzip src="${install.home}/lib/org.drools.updatesite-${drools.eclipse.version}-assembly.zip" dest="${eclipse.home}/drools-update-site" />
        <copy todir="${eclipse.home}/features" overwrite="true">
            <fileset dir="${eclipse.home}/drools-update-site/features"/>
        </copy>
        <copy todir="${eclipse.home}/plugins" overwrite="true">
            <fileset dir="${eclipse.home}/drools-update-site/plugins"/>
        </copy>
        <delete dir="${eclipse.home}/drools-update-site"/>
    </target>

    <target name="configure.jboss.modules" >
        <if>
            <not><available file="${temp.pfp.lib.dir}" type="dir" /></not>
            <then><antcall target="pfp.compile" /></then>
        </if>
        <antcall target="filter">
            <param name="source.dir" value="conf/jboss/modules"/>
            <param name="dest.dir" value="${temp.pfp.modules.dir}"/>
        </antcall>

        <if>
            <isset property="non.openshift.environment"/>
            <then>
                <!-- openshift adds database driver as a jboss module when adding database cartridge.
                     this must not be an openshift enviroment ....so adding db drivers now
                -->
                <echo message="deploying following db modules locally:  ${jdbc.module.name}" />
                <antcall target="filter">
                    <param name="source.dir" value="conf/${jdbc.module.name}/modules"/>
                    <param name="dest.dir" value="${temp.pfp.modules.dir}"/>
                </antcall>
                <if><equals arg1="${jdbc.module.name}" arg2="postgresql" />
                    <then>
                        <copy overwrite="true" verbose="true" file="${postgresql.jdbc.lib.path}" todir="${temp.pfp.modules.dir}/org/postgresql/jdbc/main" />
                        <copy overwrite="true" verbose="true" file="${postgresql.jdbc.lib.path}" todir="${pfp.module.path}/org/postgresql/jdbc/main" />
                    </then></if>
                <if><equals arg1="${jdbc.module.name}" arg2="mysql" />
                    <then>
                        <copy overwrite="true" verbose="true" file="${mysql.jdbc.lib.path}" todir="${temp.pfp.modules.dir}/com/mysql/jdbc/main" />
                        <copy overwrite="true" verbose="true" file="${mysql.jdbc.lib.path}" todir="${pfp.module.path}/com/mysql/jdbc/main" />
                    </then></if>
                <if><equals arg1="${jdbc.module.name}" arg2="oracle" />
                    <then>
                        <copy overwrite="true" verbose="true" file="${oracle.jdbc.lib.path}" todir="${temp.pfp.modules.dir}/com/oracle/jdbc/main" />
                        <copy overwrite="true" verbose="true" file="${oracle.jdbc.lib.path}" todir="${pfp.module.path}/com/oracle/jdbc/main" />
                    </then></if>
                <if><equals arg1="${jdbc.module.name}" arg2="h2" />
                    <then><echo message="configure.jboss.modules() h2 driver already in eap6.*" /></then></if>
            </then>
            <else><echo message="deploying to openshift:  postgresql/mysql/h2 modules already pre-configured" /></else>
        </if>

        <copy file="lib/commons/commons-codec-1.5.jar" todir="${temp.pfp.modules.dir}/org/apache/commons/codec/5" /> <!-- GuvnorConnectionUtils needs this version -->
        <copy file="${deps.lib.path}/stringtemplate-${version.stringtemplate}.jar" todir="${temp.pfp.modules.dir}/org/antlr/stringtemplate/main" />
        <copy file="${deps.lib.path}/protobuf-java-${version.protobuf}.jar" todir="${temp.pfp.modules.dir}/com/google/protobuf/main" />
        <copy file="${deps.lib.path}/antlr-runtime-${version.antlr}.jar" todir="${temp.pfp.modules.dir}/org/antlr/antlr-runtime/main" />
        <copy file="${deps.lib.path}/ecj-${version.ecj}.jar" todir="${temp.pfp.modules.dir}/org/eclipse/jdt/core/compiler/ecj/main" />
        <copy file="${deps.lib.path}/xstream-${version.xstream}.jar" todir="${temp.pfp.modules.dir}/com/thoughtworks/xstream/main" />
        <copy file="${deps.lib.path}/xpp3_min-${version.xpp3_min}.jar" todir="${temp.pfp.modules.dir}/com/thoughtworks/xstream/main" />
        <copy file="${deps.lib.path}/xmlpull-${version.xmlpull}.jar" todir="${temp.pfp.modules.dir}/com/thoughtworks/xstream/main" />
        <!--copy file="${deps.lib.path}/xml-apis-${version.xml.apis}.jar" todir="${temp.pfp.modules.dir}/com/thoughtworks/xstream/main" / -->
        <copy tofile="${temp.pfp.modules.dir}/org/drools/${droolsjbpm.slot}/drools-compiler-${version.drools}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="drools-compiler-*.jar" /></fileset>
        </copy>
        <copy tofile="${temp.pfp.modules.dir}/org/drools/${droolsjbpm.slot}/droolsjbpm-ide-common-${version.drools}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="droolsjbpm-ide-common-*.jar" /></fileset>
        </copy>
        <copy tofile="${temp.pfp.modules.dir}/org/drools/${droolsjbpm.slot}/drools-core-${version.drools}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="drools-core-*.jar" /></fileset>
        </copy>
        <copy tofile="${temp.pfp.modules.dir}/org/drools/${droolsjbpm.slot}/drools-persistence-jpa-${version.drools}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="drools-persistence-jpa-*.jar" /></fileset>
        </copy>
        <copy tofile="${temp.pfp.modules.dir}/org/drools/${droolsjbpm.slot}/knowledge-api-${version.drools}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="knowledge-api-*.jar" /></fileset>
        </copy>
        <copy tofile="${temp.pfp.modules.dir}/org/mvel/mvel2/main/mvel2-${version.mvel}.jar" >
            <fileset dir="${deps.lib.path}" ><include name="mvel2-*.jar" /></fileset>
        </copy>
        <copy todir="${temp.pfp.modules.dir}/org/jbpm/${droolsjbpm.slot}" >
            <fileset dir="${jbpm.lib.path}" >
                <include name="jbpm-*.jar" />
                <exclude name="jbpm-human-task-hornetq-*.jar" />
                <exclude name="jbpm-human-task-jms-*.jar" />
                <exclude name="jbpm-human-task-mina-*.jar" />
                <exclude name="jbpm-test-*.jar" />
                <exclude name="jbpm-gwt-*.jar" />
            </fileset>
        </copy>


        <if>
            <equals arg1="${community.or.supported}" arg2="community" />
            <then><var name="temp.gwt.path" value="${jbpm.source.dir}/jbpm-gwt/jbpm-gwt-shared/target/" /></then>
            <else><var name="temp.gwt.path" value="${jbpm.lib.path}/business-central-server.war/WEB-INF/lib/" /></else>
        </if>
        <copy toDir="${temp.pfp.modules.dir}/org/jbpm/${droolsjbpm.slot}" overwrite="true" >
            <fileset dir="${temp.gwt.path}" >
                <include name="jbpm-gwt-shared*.jar" />
            </fileset>
        </copy>
        <copy toDir="${temp.brmsExtras.module.path}" overwrite="true" >
            <fileset dir="${temp.gwt.path}" >
                <include name="jbpm-gwt*.jar" />
            </fileset>
        </copy>
        <copy todir="${temp.pfp.modules.dir}/org/jboss/processFlow/main" >
            <fileset dir="${temp.pfp.lib.dir}" />
        </copy>
    	<copy file="${temp.gwt.path}/gson-${version.gson}.jar" todir="${temp.pfp.modules.dir}/com/google/gson/main" />
    	
        <if>
            <isset property="non.openshift.environment"/>
            <then>
                <antcall target="explode.guvnor.and.designer" >
                    <param name="non.openshift.environment" value="true"/>
                </antcall>
            </then>
            <else>
                <antcall target="explode.guvnor.and.designer" />
            </else>
        </if>
        <antcall target="explode.jbpm.gwt.console" />
                <delete> 
                    <fileset dir="${temp.brmsExtras.module.path}" >
                        <include name="commons-collections*.jar" />
                        <include name="log4j*.jar" />
                        <include name="slf4j*.jar" />
                        <exclude name="jbpm-gwt-*.jar" />
                        <include name="jbpm*.jar" />
                        <include name="drools-compiler*.jar" />
                        <include name="drools-core*.jar" />
                        <include name="google-collections*.jar" />
                        <include name="gwt-servlet-2.0.4.jar" />
                        <include name="hornetq*.jar" />
                        <include name="knowledge-*.jar" />
                        <include name="mvel-*.jar" />
                        <include name="serializer-*.jar" />
                        <include name="xalan-2.7.1.jar" />
                        <include name="xstream-1.3.1.jar" />
                    </fileset>
                </delete>
    </target> 

    <target name="local.deploy.jboss.modules" >
        <antcall target="configure.jboss.modules" >
            <param name="non.openshift.environment" value="true"/>
        </antcall>
        <copy todir="${pfp.module.path}" overwrite="true" >
            <fileset dir="${temp.pfp.modules.dir}" />
        </copy>
        <antcall target="download.and.unzip.sy.deployer"  />
        <antcall target="configure.jbossamq.modules" >
            <param name="non.openshift.environment" value="true"/>
        </antcall>
        <!-- https://community.jboss.org/wiki/LayeredDistributionsAndModulePathOrganization -->
        <copy todir="${temp.jboss.dir}/modules" file="conf/jboss/modules/layers.conf" overwrite="true" />
        <copy todir="${jboss.home}/modules" file="conf/jboss/modules/layers.conf" overwrite="true" />
    </target>

    <target name="resolve.droolsjbpm.dependencies" >
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant" >
            <classpath>
                <pathelement location="lib/ant/maven-ant-tasks-2.1.3.jar"/>
            </classpath>
        </typedef>
        <artifact:pom id="droolsjbpm-build-bootstrap" file="${droolsjbpm.source.dir}/droolsjbpm-build-bootstrap/pom.xml" />
        <artifact:dependencies filesetId="droolsjbpm.deps.path" pomRefId="droolsjbpm-build-bootstrap" useScope="test" />
        <pathconvert pathsep="${line.separator}|   |- "
             property="echo.droolsjbpm.deps.path"
             refid="droolsjbpm.deps.path">
        </pathconvert>
        <echo message="droolsjbpm-build-bootstrap-version = ${echo.droolsjbpm.deps.path} " />
    </target> 

    <target name="local.configure.core.services">
        <math result="ha.remoting.port" operand1="${base.remoting.port}" operation="+" operand2="${ha.group.port.offset}" datatype="int" />
        <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
            <sequential>
                <var name="serverIpAddr" value="@{serverIpAddr}" />
                <antcall target="cli.batch">
                    <param name="cli.source.dir" value="conf/jboss/"/>
                    <param name="cli.to.filter.and.execute" value="core-services-up.cli"/>
                    <param name="cli.fail.on.error" value="true"/>
                </antcall>
            </sequential>
        </for>
    </target> 

    <target name="local.provision.ha.jvms">
        <sleep seconds="2"/>
        <if>
            <equals arg1="${org.jboss.processFlow.messagingProvider}" arg2="hornetq" />
            <then>
                <antcall target="cli.batch">
                    <param name="cli.source.dir" value="conf/ha/"/>
                    <param name="cli.to.filter.and.execute" value="hornetq-config-group.cli"/>
                    <param name="cli.fail.on.error" value="true"/>
                </antcall>
            </then>
        </if>
        <antcall target="cli.batch">
            <param name="cli.source.dir" value="conf/ha/"/>
            <param name="cli.to.filter.and.execute" value="ha-config-group.cli"/>
            <param name="cli.fail.on.error" value="true"/>
        </antcall>
        <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
            <sequential>
                <var name="serverIpAddr" value="@{serverIpAddr}" />
                <for list="${ha.server.number.list}" param="serverNum">
                  <sequential>
                    <var name="ha.server.id" value="ha-@{serverNum}" />
                    <math result="ha.port.increment" operand1="100" operation="*" operand2="@{serverNum}" datatype="int" />
                    <math result="ha.port.offset" operand1="${ha.group.port.offset}" operation="+" operand2="${ha.port.increment}" datatype="int" />
                    <var name="ha.server.id" value="ha-@{serverNum}" />
                    <var name="ha.block" value="false" />
                    <var name="ha.group" value="ha.group.backup" />
                    <!-- only if ha-0 on master will set jvm to ha.group .... all others will be set to ha.group.backup -->
                    <if>
                        <equals arg1="${ha.server.id}" arg2="ha-0" />
                        <then>
                            <if>
                                <equals arg1="${serverIpAddr}" arg2="master" />
                                <then>
                                    <var name="ha.block" value="true" />
                                    <var name="ha.group" value="ha.group.primary" />
                                </then>
                            </if>
                        </then>
                    </if>
                    <echo message="ha.server.id = ${ha.server.id} : serverIpAddr = ${serverIpAddr} : ha.group = ${ha.group}" />
                    <antcall target="cli.batch">
                                <param name="cli.source.dir" value="conf/ha/"/>
                                <param name="cli.to.filter.and.execute" value="ha-config-server.cli"/>
                                <param name="cli.fail.on.error" value="true"/>
                    </antcall>
                                <antcall target="cli.batch">
                                <param name="cli.source.dir" value="conf/ha/"/>
                                <param name="cli.to.filter.and.execute" value="ha-config-up.cli"/>
                                <param name="cli.fail.on.error" value="true"/>
                    </antcall>
                  </sequential>
                </for>
            </sequential>
        </for>
    </target>

    <!--
      pass following parameters to this target :
        1) org.jboss.processFlow.provision.pfpCore
        2) refresh.master (optional)
    -->
    <target name="local.provision.pfp.core">
        <if>
            <equals arg1="${org.jboss.processFlow.provision.pfpCore}" arg2="true" />
            <then>
                <if>
                    <equals arg1="${refresh.master}" arg2="true" />
                    <then><antcall target="refresh.master" /></then>
                </if>
                <!--copy file="conf/pfp/default.session.template" tofile="${drools.session.template.path}" overwrite="true" / -->
                <antcall target="cli.batch">
                    <param name="cli.source.dir" value="conf/pfp"/>
                    <param name="cli.to.filter.and.execute" value="pfp-server-group.cli"/>
                    <param name="cli.fail.on.error" value="true"/>
                </antcall>
                <if>
                    <equals arg1="${org.jboss.processFlow.messagingProvider}" arg2="hornetq" />
                    <then>
                        <antcall target="cli.batch">
                            <param name="cli.source.dir" value="conf/pfp"/>
                            <param name="cli.to.filter.and.execute" value="pfp-using-hornetq.cli"/>
                            <param name="cli.fail.on.error" value="true"/>
                        </antcall>
                    </then>
                    <else>
                        <antcall target="cli.batch">
                            <param name="cli.source.dir" value="conf/pfp"/>
                            <param name="cli.to.filter.and.execute" value="pfp-using-activemq.cli"/>
                            <param name="cli.fail.on.error" value="true"/>
                        </antcall>
                    </else>
                </if>
                <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
                    <sequential>
                        <var name="serverIpAddr" value="@{serverIpAddr}" />
                        <for list="${pfp.core.server.number.list}" param="serverNum">
                            <sequential>
                              <var name="pfp.core.server.id" value="pfp-core-@{serverNum}" />
                              <math result="pfp.core.port.increment" operand1="100" operation="*" operand2="@{serverNum}" datatype="int" />
                              <math result="pfp.core.port.offset" operand1="${pfp.core.base.port.offset}" operation="+" operand2="${pfp.core.port.increment}" datatype="int" />
                              <math result="pfp.core.debugger.port" operand1="${pfp.core.base.debugger.port}" operation="+" operand2="${pfp.core.port.increment}" datatype="int" />
                              <var name="server.specific.hibernate.hbm2ddl.auto" value="validate" />
                              <if>
                                <equals arg1="${pfp.core.server.id}" arg2="pfp-core-0" />
                                <then><var name="server.specific.hibernate.hbm2ddl.auto" value="${hibernate.hbm2ddl.auto}" /></then>
                              </if>
                              <echo message="local.provision.pfp.core() serverIpAddr=${serverIpAddr}  : pfp.core.server.id=${pfp.core.server.id} : pfp.core.port.offset=${pfp.core.port.offset} : pfp.core.debugger.port = ${pfp.core.debugger.port}  : server.specific.hibernate.hbm2ddl.auto = ${server.specific.hibernate.hbm2ddl.auto} " />
                              <antcall target="cli.batch">
                                <param name="cli.source.dir" value="conf/pfp"/>
                                <param name="cli.to.filter.and.execute" value="pfp-server-up.cli"/>
                                <param name="cli.fail.on.error" value="true"/>
                              </antcall>
                            </sequential>
                        </for>
                    </sequential>
                </for>
            </then>
            <else>
                <echo message="local.provision.pfp.core:  org.jboss.processFlow.provision.pfpCore = ${org.jboss.processFlow.provision.pfpCore}" />
            </else>
        </if>
    </target>

    <!--
      pass following parameters to this target :
        1) org.jboss.processFlow.provision.switchyard
        2) refresh.master (optional)
    -->
    <target name="local.provision.switchyard">
        <if>
            <equals arg1="${org.jboss.processFlow.provision.switchyard}" arg2="true" />
            <then>
                <if>
                    <equals arg1="${refresh.master}" arg2="true" />
                    <then><antcall target="refresh.master" /></then>
                </if>
                <antcall target="cli.batch">
                    <param name="cli.source.dir" value="conf/switchyard"/>
                    <param name="cli.to.filter.and.execute" value="sy-server-group.cli"/>
                    <param name="cli.fail.on.error" value="true"/>
                </antcall>
                <if>
                    <equals arg1="${org.jboss.processFlow.messagingProvider}" arg2="hornetq" />
                    <then>
                        <antcall target="cli.batch">
                            <param name="cli.source.dir" value="conf/switchyard"/>
                            <param name="cli.to.filter.and.execute" value="sy-using-hornetq.cli"/>
                            <param name="cli.fail.on.error" value="true"/>
                        </antcall>
                    </then>
                    <else>
                        <antcall target="cli.batch">
                            <param name="cli.source.dir" value="conf/switchyard"/>
                            <param name="cli.to.filter.and.execute" value="sy-using-activemq.cli"/>
                            <param name="cli.fail.on.error" value="true"/>
                        </antcall>
                    </else>
                </if>
                <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
                    <sequential>
                        <var name="serverIpAddr" value="@{serverIpAddr}" />
                          <for list="${sy.core.server.number.list}" param="serverNum">
                            <sequential>
                                <var name="sy.core.server.id" value="sy-core-@{serverNum}" />
                                <math result="sy.core.port.increment" operand1="100" operation="*" operand2="@{serverNum}" datatype="int" />
                                <math result="sy.core.port.offset" operand1="${sy.core.base.port.offset}" operation="+" operand2="${sy.core.port.increment}" datatype="int" />
                                <math result="sy.core.debugger.port" operand1="${sy.core.base.debugger.port}" operation="+" operand2="${sy.core.port.increment}" datatype="int" />
                                <echo message="sy.core.server.id=${sy.core.server.id} : sy.core.port.offset=${sy.core.port.offset} : sy.core.debugger.port = ${sy.core.debugger.port}" />
                                <antcall target="cli.batch">
                                    <param name="cli.source.dir" value="conf/switchyard"/>
                                    <param name="cli.to.filter.and.execute" value="sy-server-up.cli"/>
                                    <param name="cli.fail.on.error" value="true"/>
                                </antcall>
                            </sequential>
                        </for>
                    </sequential>
                </for>
            </then>
            <else>
                <echo message="local.provision.switchyard:  org.jboss.processFlow.provision.switchyard = ${org.jboss.processFlow.provision.switchyard}" />
            </else>
        </if>
    </target>


    <!--
      pass following parameters to this target :
        1) org.jboss.processFlow.provision.brmsWebs (optional)
        2) refresh.master (optional)
    -->
    <target name="local.provision.brms.webs">
        <if>
            <equals arg1="${org.jboss.processFlow.provision.brmsWebs}" arg2="true" />
            <then>
                <if>
                    <equals arg1="${refresh.master}" arg2="true" />
                    <then><antcall target="refresh.master" /></then>
                </if>
                <antcall target="local.deploy.guvnor.designer" />
                <antcall target="local.deploy.jbpm.gwt.console" />
                <math result="pfp.core.remoting.port" operand1="${base.remoting.port}" operation="+" operand2="${pfp.core.base.port.offset}" datatype="int" />
                <antcall target="cli.batch">
                    <param name="cli.source.dir" value="conf/brmsWebs"/>
                    <param name="cli.to.filter.and.execute" value="brmsWebs-config-group.cli"/>
                    <param name="cli.fail.on.error" value="true"/>
                </antcall> 

                <for list="${org.jboss.eap.host.list}" param="serverIpAddr">
                    <sequential>
                        <var name="serverIpAddr" value="@{serverIpAddr}" />
                        <antcall target="cli.batch">
                            <param name="cli.source.dir" value="conf/brmsWebs"/>
                            <param name="cli.to.filter.and.execute" value="brmsWebs-config-server.cli"/>
                            <param name="cli.fail.on.error" value="false"/>
                        </antcall> 
                        <if>
                            <equals arg1="${serverIpAddr}" arg2="master" />
                            <then>
                                <antcall target="cli.batch">
                                    <param name="cli.source.dir" value="conf/brmsWebs"/>
                                    <param name="cli.to.filter.and.execute" value="brmsWebs-config-up.cli"/>
                                    <param name="cli.fail.on.error" value="false"/>
                                </antcall> 
                            </then>
                            <else>
                                <if>
                                    <equals arg1="${org.jboss.processFlow.brmsWebs.clustered}" arg2="true" />
                                    <then>
                                        <antcall target="cli.batch">
                                            <param name="cli.source.dir" value="conf/brmsWebs"/>
                                            <param name="cli.to.filter.and.execute" value="brmsWebs-config-up.cli"/>
                                            <param name="cli.fail.on.error" value="false"/>
                                        </antcall> 
                                    </then>
                                    <else><echo message="local.provision.brms.webs() org.jboss.processFlow.brmsWebs.clustered property equals false.  will NOT start up brmsWebs on remote slave host = ${serverIpAddr}" /></else>
                                </if>
                            </else>
                        </if>
                    </sequential>
                </for>
            </then>
            <else>
                <echo message="local.provision.brms.webs:  org.jboss.processFlow.provision.brmsWebs = ${org.jboss.processFlow.provision.brmsWebs}" />
            </else>
        </if>
    </target>

    <macrodef name="iterate">
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}">
                <fileset dir="pfpServices/interfaces" includes="build.xml"/>
                <fileset dir="pfpServices/common" includes="build.xml"/>
                <fileset dir="pfpServices/bam" includes="build.xml"/>
                <fileset dir="pfpServices/knowledgeSessionService" includes="build.xml"/>
                <fileset dir="pfpServices/taskService" includes="build.xml"/>
                <fileset dir="pfpServices/haTimerService" includes="build.xml"/>
                <fileset dir="pfpServices/adminConsole" includes="build.xml"/>
                <fileset dir="privateServiceTaskRepo" includes="build.xml"/>
            </subant>
        </sequential>
    </macrodef>


    <target name="pfp.clean" description="" >
        <if>
            <available file="pfpServices" type="dir" />
            <then>
                <iterate target="clean" />
                <if>
                    <available file="${build.dir}" type="dir" />
                    <then>
                        <delete includeemptydirs="true">
                            <fileset dir="${build.dir}" excludes="lib/**/*,openshiftAccount.properties" />
                        </delete>
                    </then>
                </if>
            </then>
        </if>
        <delete dir="${distro.clean}" />
        <delete dir="privateServiceTaskRepo/${build.dir}" />
        <delete dir="pfpServicesTest/${build.dir}" />
        <delete dir="osProvision/${build.dir}" />
    </target>

    <target name="create.temp.client.dir" >
        <copy toDir="${temp.client.dir}" overwrite="true" >
            <fileset dir="${temp.pfp.lib.dir}" >
                <include name="processFlow-interfaces*.jar" />
            </fileset>
            <fileset dir="${jbpm.lib.path}" >
                <include name="jbpm-human-task-core*.jar" />
            </fileset>
            <fileset dir="${deps.lib.path}" >
                <include name="knowledge-api-*.jar" />
            </fileset>
        </copy>
    </target>


    <target name="configure.jbossamq.modules">
        <if>
            <equals arg1="${org.jboss.processFlow.messagingProvider}" arg2="amq" />
            <then>
                <antcall target="filter">
                    <param name="source.dir" value="conf/amq/modules"/>
                    <param name="dest.dir" value="${jboss.home}/modules/system/layers/pfp"/>
                </antcall>
                <get src="${activemq.rar.download.url}" dest="${install.home}/lib/"  skipexisting="true" />
                <copy file="${install.home}/lib/${activemq.rar.file.name}" todir="${jboss.home}/modules/system/layers/pfp/org/apache/activemq/rar/main" />
            </then>
            <else><echo message="not using jbossamq.  instead using:  ${org.jboss.processFlow.messagingProvider}" /></else>
        </if>
    </target>
    <target name="download.and.unzip.sy.deployer">
        <get src="${switchyard.deployer.download.url}" dest="${install.home}/lib/"  skipexisting="true" />
        <if>
            <equals arg1="${switchyard.zip.name}" arg2="switchyard.deployer.zip" />
            <then><unzip src="${install.home}/lib/${switchyard.zip.name}" dest="${jboss.home}" /></then>
            <else>
                <if>
                    <not><available file="${temp.soa.unzip.dir}/${guvnor.name}" type="dir" /></not> 
                    <then><unzip src="${install.home}/lib/${switchyard.zip.name}" dest="${temp.soa.unzip.dir}" /></then>
                </if>
                <copy todir="${jboss.home}/modules" overwrite="true">
                    <fileset dir="${temp.soa.unzip.dir}/${eap6.name}/modules" />
                </copy>
                <!-- apply temporary patches to SOA6 Alpha DR5 -->
                <copy file="lib/sy/switchyard-deploy-jboss-as7-0.8.1.Final.jar" todir="${jboss.home}/modules/system/layers/soa/org/switchyard/main/" overwrite="true" verbose="true" />
                <copy file="lib/sy/switchyard-component-jca-0.8.1.Final.jar" todir="${jboss.home}/modules/system/layers/soa/org/switchyard/component/jca/main/" overwrite="true" verbose="true" />
            </else>
        </if>
    </target>
    <target name="download.drools.guvnor">
        <get src="${drools.guvnor.url}" dest="${install.home}/lib/guvnor-distribution-wars-${drools.guvnor.version}-jboss-as-7.0.war"  skipexisting="true" />
    </target>
    <target name="download.designer" >
        <get src="${designer.url}/jbpm-designer-${designer.version}.war" dest="${install.home}/lib/jbpm-designer-${designer.version}.war"  skipexisting="true" />
    </target>
    <target name="download.jBPM.gwt-console">
        <property name="jBPM.url" value="file://${jbpm.source.dir}/jbpm-distribution/target" />
        <get src="${jBPM.url}/jbpm-${console.server.version}-gwt-console.zip" dest="${install.home}/lib/jbpm-${console.server.version}-gwt-console.zip"  skipexisting="true" />
    </target>
    <target name="download.birt.as7" >
        <mkdir dir="${install.home}/lib/reporting" />
        <get src="${birt.download.url.as7}" dest="${install.home}/lib/birt-runtime-${birt.version}.zip" skipexisting="true" />
        <get src="${jboss.nexus.url}/content/repositories/releases/org/jboss/bpm/report-core/1.3.0/report-core-1.3.0.jar" dest="${install.home}/lib/reporting" skipexisting="true" />
        <get src="${jboss.nexus.url}/content/repositories/releases/org/jboss/bpm/report-shared/1.3.0/report-shared-1.3.0.jar" dest="${install.home}/lib/reporting" skipexisting="true" />
    </target>
    <target name="download.community.guvnor.and.designer">
        <antcall target="download.drools.guvnor" />
        <antcall target="download.designer" />
    </target>

    <target name="mkPfpDirs">
        <mkdir dir="${temp.pfp.lib.dir}" />
        <mkdir dir="${temp.pfp.services.dir}" />
        <mkdir dir="${install.home}/lib" />
        <mkdir dir="${pfp.module.path}" />
        <mkdir dir="${sy.module.path}" />
    </target>

    <target name="pfp.compile" depends="mkPfpDirs" description="" >
        <if>
            <available file="pfpServices" type="dir" />
            <then><iterate target="all" /></then>
        </if>
    </target>

    <target name="all" >
        <if>
            <equals arg1="${community.or.supported}" arg2="supported" />
            <then><antcall target="unzip.brms.deployable" /></then>
        </if>
        <antcall target="apply.BZ887847" />
        <antcall target="refresh.master" />
        <antcall target="refresh.slave.hosts" />
        <antcall target="local.configure.core.services" />
        <antcall target="local.provision.ha.jvms" />
        <antcall target="local.provision.pfp.core">
            <param name="refresh.master" value="false"/>
        </antcall>
        <antcall target="local.provision.switchyard">
            <param name="refresh.master" value="false"/>
        </antcall>
        <antcall target="create.temp.client.dir" />
        <antcall target="local.provision.brms.webs">
            <param name="refresh.master" value="false"/>
        </antcall>
        <if>
            <equals arg1="${org.jboss.processFlow.provision.pfpCore}" arg2="true" />
            <then>
                <echo message="you may find executing the following will be helpful to diagnose your environment :" />
                <echo message="    curl -v -X PUT -HAccept:text/plain ${os.hostname}:8330/knowledgeService/kbase               :   refresh kBase in PFP's kSessionService" />
                <echo message="    curl -v -X GET -HAccept:text/plain ${os.hostname}:8330/knowledgeService/kbase/content       :   view contents of kbase" />
                <echo message="    curl -v -X GET -HAccept:text/plain ${os.hostname}:8330/knowledgeService/workItemHandlers    :   view all registerd workItemHandlers with kSessions" />
            </then>
        </if>
        
    </target>
    <target name="pfp.distro" depends="" >
        <property name="distro.name" value="processFlow-bin-${brms.major.version}-${brms.minor.version}" />
        <property name="base.name" value="processFlowProvision" />

        <copy file="base-build.xml" todir="${temp.distro.dir}" />
        <copy file="build.xml" todir="${temp.distro.dir}" />
        <copy file="openshift-build.xml" todir="${temp.distro.dir}" />
        <copy file="build.properties" todir="${temp.distro.dir}" />
        <copy file="LICENSE.txt" todir="${temp.distro.dir}" />
        <copy file="README.txt" todir="${temp.distro.dir}" />

        <mkdir dir="${temp.pfp.lib.dir}" />
        <mkdir dir="${temp.pfp.services.dir}" />

        <zip destfile="${install.home}/${distro.name}.zip">
            <zipfileset dir="${temp.distro.dir}" prefix="${base.name}" />
            <zipfileset dir="bin" prefix="${base.name}/bin" filemode="755"/>
            <zipfileset dir="privateServiceTaskRepo" prefix="${base.name}/privateServiceTaskRepo" />
            <zipfileset dir="${temp.client.dir}" prefix="${base.name}/clientLibs" />
            <zipfileset dir="conf" prefix="${base.name}/conf"/>
            <zipfileset dir="lib" prefix="${base.name}/lib"/>
            <zipfileset dir="osProvision" prefix="${base.name}/osProvision"/>
            <zipfileset dir="doc" prefix="${base.name}/doc">
                <include name="ADMIN_GUIDE.txt" />
                <include name="release_notes.txt" />
            </zipfileset>
            <zipfileset dir="${temp.pfp.lib.dir}" prefix="${base.name}/${build.dir}/pfp/lib" />
            <zipfileset dir="${temp.pfp.services.dir}" prefix="${base.name}/${build.dir}/pfp/services" />
        </zip>
    </target>

    <target name="apply.BZ887847" >
        <if>
            <equals arg1="${org.jboss.process.apply.BZ887847}" arg2="true" />
            <then>
                <if><not><available file="${install.home}/lib/BZ887847.zip" /></not>
                    <then>
                        <fail message="need to download BZ887847.zip from: https://access.redhat.com/jbossnetwork/restricted/listSoftware.html?product=brms.  afterwards, copy to $PFP_HOME/target/lib directory" />
                    </then>
                </if>
                <mkdir dir="${temp.brmsWebs.dir}" />
                <unzip src="${install.home}/lib/BZ887847.zip" dest="${temp.brmsWebs.dir}" />
                <copy file="${temp.brmsWebs.dir}/BZ887847/classes/org/drools/guvnor/server/configurations/ApplicationPreferencesInitializer.class"
                      todir="${temp.brms.unzip.dir}/jboss-brms.war/WEB-INF/classes/org/drools/guvnor/server/configurations"
                      overwrite="true" verbose="true" />
                <copy file="${temp.brmsWebs.dir}/BZ887847/classes/org/drools/guvnor/client/configurations/ApplicationPreferences.class"
                      todir="${temp.brms.unzip.dir}/jboss-brms.war/WEB-INF/classes/org/drools/guvnor/client/configurations"
                      overwrite="true" verbose="true" />
                <copy file="${temp.brmsWebs.dir}/BZ887847/lib/droolsjbpm-ide-common-5.3.1.BRMS-BZ_887847.jar"
                      tofile="${temp.brms.unzip.dir}/binaries/droolsjbpm-ide-common-5.3.1.BRMS.jar" 
                      overwrite="true" verbose="true" />
            </then>
        </if>
    </target>
</project>
